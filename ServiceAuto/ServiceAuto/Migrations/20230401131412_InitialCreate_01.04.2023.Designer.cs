// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ServiceAuto.Models;

#nullable disable

namespace ServiceAuto.Migrations
{
    [DbContext(typeof(ServiceingContext))]
    [Migration("20230401131412_InitialCreate_01.04.2023")]
    partial class InitialCreate_01042023
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ServiceAuto.Models.Car", b =>
                {
                    b.Property<int>("CarId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CarId"));

                    b.Property<string>("CarBrand")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CarModel")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("CarPhoto")
                        .HasColumnType("varbinary(max)");

                    b.Property<float>("CarPrice")
                        .HasColumnType("real");

                    b.Property<int>("CarProductYear")
                        .HasColumnType("int");

                    b.HasKey("CarId");

                    b.ToTable("Cars");
                });

            modelBuilder.Entity("ServiceAuto.Models.CarPart", b =>
                {
                    b.Property<int>("CarPartId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CarPartId"));

                    b.Property<string>("CarPartDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CarPartName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("CarPartPhoto")
                        .HasColumnType("varbinary(max)");

                    b.Property<float?>("CarPartPrice")
                        .HasColumnType("real");

                    b.HasKey("CarPartId");

                    b.ToTable("CarParts");
                });

            modelBuilder.Entity("ServiceAuto.Models.Contact", b =>
                {
                    b.Property<int>("ContactId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ContactId"));

                    b.Property<string>("ContactEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContactFirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContactLastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContactSubject")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ContactId");

                    b.ToTable("Contacts");
                });

            modelBuilder.Entity("ServiceAuto.Models.Employee", b =>
                {
                    b.Property<int>("EmployeeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EmployeeId"));

                    b.Property<int?>("EmployeeAge")
                        .HasColumnType("int");

                    b.Property<string>("EmployeeName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<float?>("EmployeeSalary")
                        .HasColumnType("real");

                    b.Property<int?>("ServiceId")
                        .HasColumnType("int");

                    b.HasKey("EmployeeId");

                    b.HasIndex("ServiceId");

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("ServiceAuto.Models.EmployeeAddress", b =>
                {
                    b.Property<int>("EmployeeAddressId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EmployeeAddressId"));

                    b.Property<string>("EmployeeAddress1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmployeeCity")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<string>("EmployeeState")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("EmployeeAddressId");

                    b.HasIndex("EmployeeId")
                        .IsUnique();

                    b.ToTable("EmployeeAddresses");
                });

            modelBuilder.Entity("ServiceAuto.Models.ExpenseReport", b =>
                {
                    b.Property<int>("ExpenseReportId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ExpenseReportId"));

                    b.Property<float?>("ExpenseReportExpense")
                        .HasColumnType("real");

                    b.Property<float?>("ExpenseReportIncome")
                        .HasColumnType("real");

                    b.Property<float?>("ExpenseReportProfit")
                        .HasColumnType("real");

                    b.Property<int>("ServiceId")
                        .HasColumnType("int");

                    b.HasKey("ExpenseReportId");

                    b.HasIndex("ServiceId")
                        .IsUnique();

                    b.ToTable("ExpenseReports");
                });

            modelBuilder.Entity("ServiceAuto.Models.Service", b =>
                {
                    b.Property<int>("ServiceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ServiceId"));

                    b.Property<string>("ServiceAddress1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ServiceCity")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ServiceDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ServiceName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ServiceState")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ServiceId");

                    b.ToTable("Services");
                });

            modelBuilder.Entity("ServiceAuto.Models.Employee", b =>
                {
                    b.HasOne("ServiceAuto.Models.Service", "Service")
                        .WithMany("Employees")
                        .HasForeignKey("ServiceId");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("ServiceAuto.Models.EmployeeAddress", b =>
                {
                    b.HasOne("ServiceAuto.Models.Employee", "Employee")
                        .WithOne("EmployeeAddress")
                        .HasForeignKey("ServiceAuto.Models.EmployeeAddress", "EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("ServiceAuto.Models.ExpenseReport", b =>
                {
                    b.HasOne("ServiceAuto.Models.Service", "Service")
                        .WithOne("ExpenseReport")
                        .HasForeignKey("ServiceAuto.Models.ExpenseReport", "ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Service");
                });

            modelBuilder.Entity("ServiceAuto.Models.Employee", b =>
                {
                    b.Navigation("EmployeeAddress");
                });

            modelBuilder.Entity("ServiceAuto.Models.Service", b =>
                {
                    b.Navigation("Employees");

                    b.Navigation("ExpenseReport");
                });
#pragma warning restore 612, 618
        }
    }
}
